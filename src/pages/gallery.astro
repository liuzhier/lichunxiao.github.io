---
import I18nKey from "@i18n/i18nKey";
import { i18n } from "@i18n/translation";
import MainGridLayout from "@layouts/MainGridLayout.astro";
import { Icon } from "astro-icon/components";
import { formatDateI18n } from "@utils/date-utils";

// 相册数据 - 直接在服务端定义
const galleryData = {
	data: [
		{
			id: 1,
			title: "Anime",
			description:
				"Anime is a genre of Japanese animation that features vibrant colors, complex characters, and imaginative worlds.",
			coverImage: "/images/gallery/anime/pc/2.jpg",
			createdAt: "2025-08-20",
			tags: ["Anime", "Character", "Scene"],
			images: [
				"/images/gallery/anime/pe/1.webp",
				"/images/gallery/anime/pe/2.jpg",
				"/images/gallery/anime/pe/3.jpg",
				"/images/gallery/anime/pe/4.jpg",
				"/images/gallery/anime/pc/1.jpg",
				"/images/gallery/anime/pc/2.jpg",
				"/images/gallery/anime/pc/3.jpg",
				"/images/gallery/anime/pc/4.jpg",
			],
		},
	],
};

// 计算总图片数量
const totalImages = galleryData.data.reduce(
	(total, group) => total + group.images.length,
	0,
);
---

<MainGridLayout title={i18n(I18nKey.gallery)} description={i18n(I18nKey.gallerySubtitle)}>
	<div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative min-h-32">
		<div class="card-base z-10 px-9 py-6 relative w-full">
			<!-- 页面标题 -->
			<div class="mb-8">
				<h1 class="text-3xl font-bold text-[var(--deep-text)] dark:text-white mb-2">
					{i18n(I18nKey.gallery)}
				</h1>
				<p class="text-[var(--content-meta)]">
					{i18n(I18nKey.gallerySubtitle)}
				</p>
			</div>

			<!-- 统计信息 -->
			<div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
				<div class="bg-[var(--card-bg)] border border-[var(--line-divider)] rounded-[var(--radius-large)] p-4 hover:bg-[var(--btn-card-bg-hover)] transition-colors">
					<div class="flex items-center justify-between">
						<div>
							<p class="text-[var(--content-meta)] text-sm">{i18n(I18nKey.galleryTotalGroups)}</p>
							<p class="text-2xl font-bold text-[var(--deep-text)] dark:text-white">{galleryData.data.length}</p>
						</div>
						<Icon name="material-symbols:photo-library" class="w-8 h-8 text-[var(--primary)]" />
					</div>
				</div>
				<div class="bg-[var(--card-bg)] border border-[var(--line-divider)] rounded-[var(--radius-large)] p-4 hover:bg-[var(--btn-card-bg-hover)] transition-colors">
					<div class="flex items-center justify-between">
						<div>
							<p class="text-[var(--content-meta)] text-sm">{i18n(I18nKey.galleryTotalImages)}</p>
							<p class="text-2xl font-bold text-[var(--deep-text)] dark:text-white">{totalImages}</p>
						</div>
						<Icon name="material-symbols:image" class="w-8 h-8 text-[var(--primary)]" />
					</div>
				</div>
				<div class="bg-[var(--card-bg)] border border-[var(--line-divider)] rounded-[var(--radius-large)] p-4 hover:bg-[var(--btn-card-bg-hover)] transition-colors">
					<div class="flex items-center justify-between">
						<div>
							<p class="text-[var(--content-meta)] text-sm">{i18n(I18nKey.galleryRecentActivity)}</p>
							<p class="text-2xl font-bold text-[var(--deep-text)] dark:text-white">3</p>
						</div>
						<Icon name="material-symbols:trending-up" class="w-8 h-8 text-[var(--primary)]" />
					</div>
				</div>
			</div>

			<!-- 相册组列表 -->
			<div class="space-y-6">
				{galleryData.data.map((group, groupIndex) => (
					<div class="gallery-group bg-[var(--card-bg)] rounded-[var(--radius-large)] overflow-hidden transition-all duration-300 hover:shadow-lg" data-group-id={group.id}>
						<!-- 相册组头部 - 可点击展开/折叠 -->
						<div class="gallery-header cursor-pointer relative h-48 overflow-hidden group" data-action="toggle">
							<img
								src={group.coverImage}
								alt={group.title}
								class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
								loading="lazy"
							/>
							<div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent"></div>
							
							<!-- 相册信息 -->
							<div class="absolute bottom-4 left-4 text-white">
								<h3 class="text-xl font-bold mb-1">{group.title}</h3>
								<p class="text-sm opacity-90">{group.images.length} 张图片</p>
								<p class="text-xs opacity-75 mt-1">{group.description}</p>
							</div>
							
							<!-- 日期标签 -->
							<div class="absolute top-4 right-4 bg-black/50 text-white px-2 py-1 rounded-full text-sm">
								{formatDateI18n(group.createdAt)}
							</div>
							
							<!-- 展开/折叠图标 -->
							<div class="absolute bottom-4 right-4 bg-black/50 text-white p-2 rounded-full transition-all duration-300">
								<svg class="expand-icon w-5 h-5 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
								</svg>
							</div>
						</div>

						<!-- 相册组内容 - 默认隐藏 -->
						<div class="gallery-content hidden transition-all duration-300">
							<div class="p-6">
								<!-- 标签 -->
								<div class="flex flex-wrap gap-2 mb-4">
									{group.tags.map(tag => (
										<span class="bg-[var(--btn-regular-bg)] text-[var(--btn-content)] px-3 py-1 rounded-full text-sm">
											{tag}
										</span>
									))}
								</div>

								<!-- 图片网格 -->
								<div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
									{group.images.map((image, index) => (
										<div class="gallery-image cursor-pointer group relative overflow-hidden rounded-lg aspect-square" data-image={image} data-action="view">
											<img
												src={image}
												alt={`${group.title} - 图片 ${index + 1}`}
												class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110"
												loading="lazy"
											/>
											<div class="absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-all duration-300 flex items-center justify-center">
												<svg class="w-8 h-8 text-white opacity-0 group-hover:opacity-100 transition-opacity duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
													<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
												</svg>
											</div>
										</div>
									))}
								</div>
							</div>
						</div>
					</div>
				))}
			</div>
		</div>
	</div>
</MainGridLayout>

<!-- 相册功能脚本 -->
<script>
	// 简化的相册管理器
	class SimpleGalleryManager {
		constructor() {
			this.init();
		}

		init() {
			console.log('SimpleGalleryManager 初始化');
			// 使用事件委托处理所有点击事件
			document.addEventListener('click', this.handleClick.bind(this));
		}

		handleClick(event) {
			const target = event.target.closest('[data-action]');
			if (!target) return;

			// 阻止事件冒泡和默认行为，防止被translate.js的全局click监听器干扰
			event.preventDefault();
			event.stopPropagation();
			event.stopImmediatePropagation();

			const action = target.getAttribute('data-action');
			console.log('点击事件:', action, target);

			switch (action) {
				case 'toggle':
					this.toggleGallery(target);
					break;
				case 'view':
					const imageSrc = target.getAttribute('data-image');
					if (imageSrc) {
						this.showImageModal(imageSrc);
					}
					break;
			}
		}

		toggleGallery(header) {
			console.log('切换相册展开状态');
			const group = header.closest('.gallery-group');
			const content = group.querySelector('.gallery-content');
			const icon = header.querySelector('.expand-icon');

			if (!content) {
				console.error('未找到相册内容元素');
				return;
			}

			const isHidden = content.classList.contains('hidden');
			console.log('当前状态 - 隐藏:', isHidden);

			if (isHidden) {
				// 展开相册
				content.classList.remove('hidden');
				group.classList.add('expanded');
				if (icon) {
					icon.style.transform = 'rotate(180deg)';
				}
				console.log('相册已展开');
			} else {
				// 折叠相册
				content.classList.add('hidden');
				group.classList.remove('expanded');
				if (icon) {
					icon.style.transform = 'rotate(0deg)';
				}
				console.log('相册已折叠');
			}
		}

		showImageModal(imageSrc) {
			console.log('显示图片模态框:', imageSrc);
			
			// 创建模态框
			const modal = document.createElement('div');
			modal.className = 'fixed inset-0 bg-black/90 flex items-center justify-center z-50 p-4';
			modal.style.opacity = '0';
			modal.style.transition = 'opacity 0.3s ease';

			// 创建图片容器
			const imageContainer = document.createElement('div');
			imageContainer.className = 'relative max-w-full max-h-full';

			// 创建图片元素
			const img = document.createElement('img');
			img.src = imageSrc;
			img.alt = '查看图片';
			img.className = 'max-w-full max-h-full object-contain rounded-lg';
			img.style.transform = 'scale(0.9)';
			img.style.transition = 'transform 0.3s ease';

			// 创建关闭按钮
			const closeBtn = document.createElement('button');
			closeBtn.className = 'absolute top-4 right-4 bg-black/50 text-white p-2 rounded-full hover:bg-black/70 transition-colors';
			closeBtn.innerHTML = `
				<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
				</svg>
			`;

			// 组装模态框
			imageContainer.appendChild(img);
			imageContainer.appendChild(closeBtn);
			modal.appendChild(imageContainer);
			document.body.appendChild(modal);

			// 显示动画
			requestAnimationFrame(() => {
				modal.style.opacity = '1';
				img.style.transform = 'scale(1)';
			});

			// 关闭模态框函数
			const closeModal = () => {
				modal.style.opacity = '0';
				img.style.transform = 'scale(0.9)';
				setTimeout(() => {
					if (document.body.contains(modal)) {
						document.body.removeChild(modal);
					}
					document.removeEventListener('keydown', handleEsc);
				}, 300);
			};

			// ESC键关闭
			const handleEsc = (e) => {
				if (e.key === 'Escape') closeModal();
			};

			// 绑定事件
			closeBtn.addEventListener('click', closeModal);
			modal.addEventListener('click', (e) => {
				if (e.target === modal) closeModal();
			});
			document.addEventListener('keydown', handleEsc);
		}
	}

	// 初始化相册管理器
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', () => {
			new SimpleGalleryManager();
		});
	} else {
		new SimpleGalleryManager();
	}
</script>

<style>
	.card-base {
		@apply bg-[var(--card-bg)] rounded-[var(--radius-large)] shadow-sm border border-[var(--line-divider)];
	}

	.gallery-group.expanded {
		@apply shadow-xl;
	}

	.gallery-content {
		max-height: 0;
		overflow: hidden;
		transition: max-height 0.3s ease-out;
	}

	.gallery-group.expanded .gallery-content {
		max-height: 2000px;
	}

	.gallery-image:hover {
		@apply shadow-lg;
	}

	/* 响应式网格调整 */
	@media (max-width: 768px) {
		.gallery-content .grid {
			grid-template-columns: repeat(2, 1fr);
		}
	}

	@media (max-width: 480px) {
		.gallery-content .grid {
			grid-template-columns: repeat(1, 1fr);
		}
	}
</style>
